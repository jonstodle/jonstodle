<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root [<!ELEMENT Home ANY>
<!ATTLIST Home id ID #REQUIRED>
<!ELEMENT ProjectsPage ANY>
<!ATTLIST ProjectsPage id ID #REQUIRED>
<!ELEMENT BlogPage ANY>
<!ATTLIST BlogPage id ID #REQUIRED>
<!ELEMENT Project ANY>
<!ATTLIST Project id ID #REQUIRED>
<!ELEMENT BlogPost ANY>
<!ATTLIST BlogPost id ID #REQUIRED>
<!ELEMENT Rss ANY>
<!ATTLIST Rss id ID #REQUIRED>
<!ELEMENT UnlistedPages ANY>
<!ATTLIST UnlistedPages id ID #REQUIRED>
<!ELEMENT textPage ANY>
<!ATTLIST textPage id ID #REQUIRED>
]>
<root id="-1">
  <Home id="1059" key="fcf718d6-4dae-411a-abbb-a179abafdcfd" parentID="-1" level="1" creatorID="0" sortOrder="0" createDate="2016-02-03T00:38:21" updateDate="2016-02-03T23:20:04" nodeName="Home" urlName="home" path="-1,1059" isDoc="" nodeType="1046" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1055" nodeTypeAlias="Home">
    <twitterName><![CDATA[jonstodle]]></twitterName>
    <twitterUrl><![CDATA[https://twitter.com/jonstodle]]></twitterUrl>
    <siteTitle><![CDATA[Jon<br/>Stødle]]></siteTitle>
    <tabText><![CDATA[Jon]]></tabText>
    <title><![CDATA[Bio]]></title>
    <image><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1070/15-01.jpeg",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600,
      "coordinates": {
        "x1": 0.13555555555555557,
        "y1": 0,
        "x2": 0.19777777777777778,
        "y2": 0
      }
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200
    }
  ]
}]]></image>
    <text><![CDATA[<p><strong>Name</strong>: Jon Stødle</p>
<p><strong>Age</strong>: !!age!!</p>
<p><strong>Nationality</strong>: Norwegian</p>
<p><strong>Occupation</strong>: IT Support</p>
<p><strong>Hobbies</strong>: Gaming, Programming</p>
<p><strong>Likes</strong>: Cute girls</p>
<p><strong>Hates</strong>: Tomatoes, Pineapples and those popcorn pieces that get stuck in your teeth</p>
<p>This is my homepage. Feel free to poke around if you want. You'll find projects I am or have been working on - and that's pretty much it.</p>]]></text>
    <BlogPage id="1060" key="5fb31690-a601-4a15-8275-81dceb3d789c" parentID="1059" level="2" creatorID="0" sortOrder="0" createDate="2016-02-03T00:38:56" updateDate="2016-02-03T00:38:56" nodeName="Soap Box" urlName="soap-box" path="-1,1059,1060" isDoc="" nodeType="1048" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1053" nodeTypeAlias="BlogPage">
      <title><![CDATA[Soap Box]]></title>
      <BlogPost id="1071" key="49c2dd56-b1ea-42e7-97dc-241a1bcd44e8" parentID="1060" level="3" creatorID="0" sortOrder="0" createDate="2012-07-14T01:48:06" updateDate="2016-02-05T10:23:48" nodeName="Does IsolatedStorageSettings persist through an app update?" urlName="does-isolatedstoragesettings-persist-through-an-app-update" path="-1,1059,1060,1071" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[This was a question I ended up asking myself as I was about to push my first update to [Quote List](/{localLink:1067}). My first thought was "Yes", that seems the logical answer. The data that I put there are persistent through application launches and I've made sure the code to handle this data checks whether there's data stored already, to prevent overwriting existing data.
As it turns out, the updating of an app doesn't touch the data stored in IsolatedStorageSettings. So, as long as you've written proper code that checks for existing data and prevents the app to overwrite said data if it's present, there's no worry.

Of course this is the expected and probable behavior, but the fact was; I couldn't find anyone actually confirming this on the web. So my goal with this (rather short) post is to aid the next aspiring developer who wonders the same thing: Does IsolatedStorageSettings persist through an app update?]]></bodyText>
        <title><![CDATA[Does IsolatedStorageSettings persist through an app update?]]></title>
      </BlogPost>
      <BlogPost id="1072" key="f9121a32-795b-4c7a-9a54-67709d4b7473" parentID="1060" level="3" creatorID="0" sortOrder="1" createDate="2012-08-23T01:48:38" updateDate="2016-02-05T10:48:54" nodeName="Dynamic application title on Windows Phone 7.x using recources" urlName="dynamic-application-title-on-windows-phone-7x-using-recources" path="-1,1059,1060,1072" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[I was developing a stupidly simple application for personal use and came up with a humorous idea. I wanted the application title on top of the app pages to also show the version. However I didn't want to add code to every code-behind file to make it so. I came up with the idea of adding the string, used as the application title, to the application resources. Then I used a simple binding to make it all happen.

    <!-- In App.xaml -->  
    <Application.Resources>  
        <sys:String x:Key="ApplicationTitle">FUEL CONSUMPTION - v1.0</sys:String>  
    </Application.Resources>  
    <!-- In MainPage.xaml -->  
    <StackPanel x:Name="TitlePanel" Grid.Row="0" Margin="12,17,0,28">  
        <TextBlock x:Name="ApplicationTitle" Text="{StaticResource ApplicationTitle}" Style="{StaticResource PhoneTextNormalStyle}"/>  
    </StackPanel>

This worked excellently, but; I didn't want to add the version to the resources everytime i updated the application. Of course this is a bit lazy since it's not that much of a hassle, but there's something a bit more cool about it updating by itself.

To make this dynamic I needed to do some coding in C#: To get the version number of the application i fetched the version number of the assembly. The version number of the assembly is set by right clicking the project in Visual Studio and click Properties. From there you click on Assembly Information and edit the version numbering there. The resources are represented by a ResourceDictionary and I tried this approach:

    // In MainPage.xaml#PhoneApplicationPage_Loaded event handler
    
    // Get the version number from the assembly
    var nameHelper = new System.Reflection.AssemblyName(System.Reflection.Assembly.GetExecutingAssembly().FullName);
    
    // Set the new string as the resource string
    Application.Current.Resources["ApplicationTitle"] = string.Format("FUEL CONSUMPTION - v{0}.{1}", nameHelper.Version.Major.ToString(), nameHelper.Version.Minor.ToString()));


This didn't work to well though. Every time I tried doing this, a NotImplementedException was thrown at me. After some googling around it turned out that the setter for entries in the ResourceDictionary only does this one thing; throw an NotImplementedException. I went onto the big, wide interwebs and asked on Stack Overflow if anyone knew an answer. After some tips from some brilliant minds, I got inspired and came up with a solution.

Adding new resources to the application isn't a problem, nor is removing them. All I had to do was to remove the resource with the key "ApplicationTitle" and add it again with the new string.

    // In MainPage.xaml#PhoneApplicationPage_Loaded event handler
    
    // Get the version number from the assembly
    var nameHelper = new System.Reflection.AssemblyName(System.Reflection.Assembly.GetExecutingAssembly().FullName);
    
    // Check whether the resource is present and then delete it
    if(Application.Current.Resources.Contains("ApplicationTitle"))
     Application.Current.Resources.Remove("ApplicationTitle");
    
    // Add the resource again with the updated string
    Application.Current.Resources.Add("ApplicationTitle", string.Format("FUEL CONSUMPTION - v{0}.{1}", nameHelper.Version.Major.ToString(), nameHelper.Version.Minor.ToString()));

This didn't yield the right result either. It did work if I navigated to another page in the application. As it turns out, you see; the resources are not dependency properties, which means they don't send an event for changes made in the object. That's why the application title does not update in MainPage.xaml. This is however easily remedied by putting the previous code into the Application_Launching event handler which launches before the PhoneApplicationPage is even called, as per the Windows Phone execution model.

That's how I finally managed to get a "dynamic" application title without having to add code to every PhoneApplicationPage I make, I only have to bind the title of the page to the application resource.]]></bodyText>
        <title><![CDATA[Dynamic application title on Windows Phone 7.x using recources]]></title>
      </BlogPost>
      <BlogPost id="1081" key="bd10e39f-8edc-477e-9bfe-6643ab801cf9" parentID="1060" level="3" creatorID="0" sortOrder="2" createDate="2015-09-17T01:54:30" updateDate="2016-02-05T10:29:44" nodeName="iOS 9 app switcher switches direction" urlName="ios-9-app-switcher-switches-direction" path="-1,1059,1060,1081" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[Fore some reason, the app switcher in iOS 9 has changed direction: The most recent app is shown in front and the older apps are shown stacked behind each other towards the left, as shown in the image below:

![](/media/1014/app-switcher-ios9.png)

This has also been the norm on Windows Phone and it's app switcher: the older apps are shown to the left, with the most recent rightmost in the list, as shown here:

![](/media/1015/app-switcher-wp8.jpg)

I believe this to be the right order to sort apps. It makes more sense to most of the western world. We read from left to right and progression is associated with left to right movement.

If you observe in films, you'll see that the journey (or progressing travels) happen from left to right on the screen. Going from right to left however symbolises the journey home (or something going backwards).

In my mind sorting the apps from most recent to the right, and the least recent to the left, shows the users digital journey through apps. If they want to find an app they've used in the past, "travel" to the left and find it, just as you would find something previously read in a book to the left.

That's why I am confused as to why Microsoft has changed the direction of the app switcher in Windows 10 Mobile to the one iOS had before:

![](/media/1010/app-switcher-w10m.png)

Windows 10 Mobile is still not done, and they may change it, but it seems like a bit of a backwards step. There is however one positive thing to say about the change: it easier to reach the previous app if you're holding the phone in your right hand. (Which should be a win for all those who don't like navigation to be in the top left corner.)]]></bodyText>
        <title><![CDATA[iOS 9 app switcher switches direction]]></title>
      </BlogPost>
      <BlogPost id="1082" key="9efcfe88-3cab-4cbf-8de1-04682000efa8" parentID="1060" level="3" creatorID="0" sortOrder="3" createDate="2012-07-04T01:55:04" updateDate="2016-02-05T10:32:08" nodeName="Will the PDK clean up Android?" urlName="will-the-pdk-clean-up-android" path="-1,1059,1060,1082" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[No.

That's the simple fact of it, no. Android's problem isn't just the fact that the hardware isn't getting the latest updates it's the fact that the hardware vendors have the freedom to do what the they want. Of course, this is one of the great advantages of Android and the devices that run it; the great diversity and choice. There's an Android device for everyone.

The problem however is that some of the hardware vendors (read all) think they can do a better job than Google designing Android. One of the best examples of this is the HTC One X: HTC has altered the way multitasking is handled in the operating system, making it much more aggressive to close apps, resulting in frustration for some power users. According to them the added feature produces unwanted behavior. For most users though it should result in better battery life, which is something Android is notoriously bad at.

Thankfully, not all hardware vendors considers themselves hardware engineering geniuses and leave a lot of the designs of Android to Google, and stick to making smaller, cosmetic changes and improvements. Some adding tighter and/or better integration with different services to differentiate themselves from the competition. While this might a good thing in theory, it adds confusion in reality: one of the strengths of the iPhone or Windows Phone devices is a consistent experience. If you pick one device up, there's no confusion to use it; if you've used one before, you'll know how to use this one too.

In the early days of Android I didn't mind this customization too much, I agreed with the hardware vendors: Android is far from perfect, let's help Google make it better. As both years and versions has passed by, Android has gotten better and better, even at integration with other services. I'm the first admit that Android still isn't perfect is something as close to it as can be. I think that it's finally surpassed iPhone and Windows Phone hasn't caught up quite yet. Windows Phone is at the place where Android was a [few years ago](http://xkcd.com/1070/).

With the legendary 4.0, Ice Cream Sandwich, release of Android, the mobile operating system finally grew up and become not only beautiful, but also polished; more so than ever before. The UI didn't only look good and distinct without looking like something designed in the early 2000s, it actually looks modern and sleek. The experience was snappy (at least on the devices I've tried) and it felt like something that could seriously compete with the iPhone. At this point Android had also surpassed the iPhone when it came to features, the place it should have. Android was made for a lot of features and it's finally there, the iPhone can't keep up and shouldn't; the iPhone is not the device with all e features one. An think of, it the device that looks good while using it.

The recently announced 4.1, Jelly Beans, will add some features that the iPhone did better, and refine and improve some that the iPhone still doesn't do as well. With 4.1 Android suddenly became tempting again to me. I stopped using Android two years back and didn't think I'd never want to go back, but Google proved me wrong. With the announcement of the new version, there was also the announcement of the PDK, Platform Development Kit, an SDK for hardware vendors.

The PDK is Google's latest attempt to make hardware vendors port their custom software into the newest version of Android at a much quicker pace, something that I don't think is the main problem. The main problem is the customization itself, in my mind the only proper Android experience is on the Nexus line devices. I would only call Android on other devices a passable experience and sub-par to the one you'll be having on a "proper" Android device. While I'd admit that the Improved battery life of the One X is preferable, but the rest of the experience is not desirable to the default one on the Nexus devices.

All in all, I don't think that Android can be "saved" from the hardware vendors, but it can be properly experienced on the Nexus range. Although I'm mostly invested in Windows Phone myself, I can't deny that I have a general interest what's going on in the "enemy" camps. There's nothing more that I want, than to other platforms to succeed at something, making the competitors scrambling to make something comparable, that's called innovation and progress.

I dont think that Android can move away from it's current situation but it'll push it's competitors to make improvements and continue to make better experiences and products.]]></bodyText>
        <title><![CDATA[Will the PDK clean up Android?]]></title>
      </BlogPost>
      <BlogPost id="1083" key="4cf5e00d-d7ff-4871-ae8e-587f64b70b41" parentID="1060" level="3" creatorID="0" sortOrder="4" createDate="2015-10-27T01:55:51" updateDate="2016-02-05T11:08:56" nodeName="UWP ListView without highlighting and stuff" urlName="uwp-listview-without-highlighting-and-stuff" path="-1,1059,1060,1083" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[When designing one of my apps I wanted to use a ListView, but not have the items highlighted when the mouse pointer was hovering over them. You can see the highlighting below:

![](/media/1011/listview-with-effects.gif)

After some googling I found that the highlighting happens in the **ListViewItemPresenter**, which turns out to be pretty hidden. It's located inside the **ControlTemplate** of an **ListViewItem**, which is the **ItemContainer** for the **ListView**. The simplest way I've found to disable the effect is to simply override this **ControlTemplate**:

    <ListView>
    	<ListView.ItemContainerStyle>
    		<Style TargetType="ListViewItem">
    			<Setter Property="Template">
    				<Setter.Value>
    					<ControlTemplate>
    						<ContentPresenter/>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Style>
    	</ListView.ItemContainerStyle>
    	<TextBlock Text="List Item" />
    	...
    	<TextBlock Text="List Item" />
    </ListView>

By switching the **ListItemViewPresenter** for a **ContentPresenter** you may have to do some styling differently, but it shouldn't be too much of a hassle. After all the **Button** uses a **ContentPresenter** to show it's contents. After the switch you'll get something like this:

![](/media/1012/listview-without-effects.gif)

The only "side effect" is that if the user taps or clicks on one of the items in the list, it will scroll the whole item into view (as far as it's possible). I don't think this necessarily is a drawback, as it makes it easier for the user to see the whole item if (s)he wants to.]]></bodyText>
        <title><![CDATA[UWP ListView without highlighting and stuff]]></title>
      </BlogPost>
      <BlogPost id="1084" key="a93aa124-30f4-4b5d-988a-89faebdd4f24" parentID="1060" level="3" creatorID="0" sortOrder="5" createDate="2015-10-28T01:56:39" updateDate="2016-02-05T11:08:15" nodeName="WrapPanel with full width columns" urlName="wrappanel-with-full-width-columns" path="-1,1059,1060,1084" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[I wanted to have a grid of elements where the elements spanned the whole available width. Basically I wanted the same result you get when you set the **ColumnDefinitions** of a **Grid** to have equal width:

    <Grid>
    	<Grid.ColumnDefinitions>
    		<ColumnDefinition/>
    		<ColumnDefinition/>
    		<ColumnDefinition/>
    	</Grid.ColumnDefinitions>
    </Grid>

However, I needed it to be more dynamic than a **Grid**. I wanted to be able to set a number of columns and then just supply a set of items. Kind of like a **GridView**, but with elements always filling the whole width.

To get this working I made a custom panel which takes a number of columns and then arranges all the children within the available width, stretching them equally.

![Uniform Width Panel](http://jonstodle.com/media/1013/uniform-width.gif)

I made a new panel which inherits from the **Panel** class. I called it **UniformGridWrapPanel**. I made a **DependencyProperty** called **MaximumColumns**, which is an **int** that keeps track of the desired amount of columns. I then overrode the **MeasureOverride**:

    protected override Size MeasureOverride(Size availableSize)
    {
    	// Set it to use whole available width
    	var finalSize = new Size { Width = availableSize.Width };
    	var columnWidth = availableSize.Width / MaximumColumns;
    
    	var rowHeight = 0d;
    	var rowChildCount = 0;
    	foreach (var child in Children)
    	{
    		child.Measure(new Size(columnWidth, availableSize.Height));
    		if (rowChildCount < MaximumColumns)
    		{
    			// Get the talles element in the row to make sure the next row is below all elements on this row
    			rowHeight = Math.Max(child.DesiredSize.Height, rowHeight);
    		}
    		else
    		{
    			// New row
    			finalSize.Height += rowHeight;
    			rowHeight = child.DesiredSize.Height;
    			rowChildCount = 0;
    		}
    		rowChildCount++;
    	}
    
    	// Add height of last row
    	finalSize.Height += rowHeight;
    	return finalSize;
    }

I make the panel use the whole available width and the calculate the width of the columns. I also keep track of the row height, which is the height of the tallest element in the current row. This makes sure that the row below doesn't overlap the one above it.

If the child count of the current row exceeds the number of columns, I make a new row by adding the height of the current row to the final size of the panel. I set the new row height to be the current element (since it's the talles element on the new row) and reset the child count. Last I add the final row's height to the final size of the panel and return it.

I did the **ArrangeOverride** like so:

    protected override Size ArrangeOverride(Size finalSize)
    {
    	var columnWidth = finalSize.Width / MaximumColumns;
    	var posY = 0d;
    
    	var rowHeight = 0d;
    	var rowChildCount = 0;
    	foreach (var child in Children)
    	{
    		if (rowChildCount >= MaximumColumns)
    		{
    			// New row
    			rowChildCount = 0;
    			posY += rowHeight;
    			rowHeight = 0;
    		}
    
    		child.Arrange(new Rect(columnWidth * rowChildCount, posY, columnWidth, child.DesiredSize.Height));
    		// Get the height of the row, based on the talles row child
    		rowHeight = Math.Max(child.DesiredSize.Height, rowHeight);
    		rowChildCount++;
    	}
    
    	return finalSize;
    }

I do much the same here as in the **MeasureOverride**. Here I use the row child count to multiply it by the column width: the first child has index 0, which when multiplied will give an x coordinate of 0. The next child will be moved 1 column width to the right. Apart from that it's much the same.

In UWP apps you can use an **AdaptiveTrigger** to set the column count on the panel based on how much room you've got.

![Uniform Width Adaptive](/media/1016/uniform-width-adaptive.gif)

The whole class can be found on [GitHub](https://gist.github.com/jonstodle/ff4621c4e78ecebe1466).

**Update:** Just as a warning - the panel does not use virtualization. If you put a lot of elements inside, the performance is not going to be good.]]></bodyText>
        <title><![CDATA[WrapPanel with full width columns]]></title>
      </BlogPost>
      <BlogPost id="1166" key="6beb1cb1-b55f-47bd-bdab-bb1f164e7a4b" parentID="1060" level="3" creatorID="0" sortOrder="6" createDate="2016-06-28T19:28:03" updateDate="2016-06-28T19:38:15" nodeName="Files uploaded with Device Portal gives &quot;Access denied&quot; at runtime" urlName="files-uploaded-with-device-portal-gives-access-denied-at-runtime" path="-1,1059,1060,1166" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[Now here's a nice nut to crack: I was trying to write some code to read the settings file generated by `IsolatedStorageSettings` in Silverlight for Windows Phone. The file is named "__ApplicationSettings" and if it was located, it should be loaded, read and the contents parsed.

Sounds simple enough.

I opened Device Portal which lets me see the files in the local storage of the new UWP app and also lets me upload new files. I upload a test file which contains some sample data and run the app to see if the logic works.

No such luck.

I get an `UnauthorizedAccessException`. And no matter how I try to read the file, it won't let me. After trying to google around the interwebs, asking some select people and reading [this][1] excellent post by [Pedro Lamas][2], I was getting nowhere.

It wasn't until [Rodrigo Diaz][3] pointed out that maybe the Device Portal was the problem. I then tried using the "IsolatedStorageExplorer" tool for Windows Phone 8.1 and upload the file to the device that way.

IT WORKS!

It looks like the Device Portal uploads the files with some sort of weird permissions. I haven't seen anyone else having this problem when searching, but I might have looked in the wrong places. The weird thing is though, the IsolatedStorageExplorer wasn't able to read the files either, but writing went fine. Weird...


  [1]: https://www.pedrolamas.com/2014/08/14/upgrading-from-the-isolatedstoragesettings-to-applicationdata-localsettings/
  [2]: https://twitter.com/pedrolamas
  [3]: https://twitter.com/r2d2rigo]]></bodyText>
        <title><![CDATA[Files uploaded with Device Portal gives "Access denied" at runtime]]></title>
      </BlogPost>
      <BlogPost id="1167" key="66a78103-fe4d-494d-aa30-dd63c5eacf2b" parentID="1060" level="3" creatorID="0" sortOrder="7" createDate="2016-07-11T09:33:27" updateDate="2016-07-11T11:09:09" nodeName="Removing items from Xamarin.Forms navigation back stack" urlName="removing-items-from-xamarinforms-navigation-back-stack" path="-1,1059,1060,1167" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[I'm currently hacking together a small utility/calculator app for my girlfriend and wanted to enable navigation from one page to another, but remove the page I was navigating from from the navigation back stack. Like I've masterly illustrated below:

![enter image description here][1]

Navigating backwards from page 3 should send the user directly to page 1 and skip page 2 entirely.

My first instinct was to just remove an element from the back after navigating to the next page, but in Xamarin.Forms the back stack is an `IReadOnlyList` and can't be edited.

After some googling I found a simple solution in the [Xamarin forums][2]: Insert the next page before the current page in the stack by using `InsertPageBefore()` and then navigate backwards:

    Navigation.InsertPageBefore(new Page(), Navigation.NavigationStack[Navigation.NavigationStack.Count -1]);
    await Navigation.PopAsync();

I'm guessing there are some weird cross platform compatibility issue with removing stuff from the back stack, but here's a simple workaround at least :)


  [1]: /media/1122/remove-from-navigation.png
  [2]: https://forums.xamarin.com/discussion/comment/125273/#Comment_125273]]></bodyText>
        <title><![CDATA[Removing items from Xamarin.Forms navigation back stack]]></title>
      </BlogPost>
      <BlogPost id="1170" key="ed6b971b-acaa-4594-a265-1279a14f25c6" parentID="1060" level="3" creatorID="0" sortOrder="8" createDate="2016-08-01T16:31:15" updateDate="2016-08-08T11:06:26" nodeName="Visual Studio Snippets: the shortcut to repetitive code" urlName="visual-studio-snippets-the-shortcut-to-repetitive-code" path="-1,1059,1060,1170" isDoc="" nodeType="1050" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1054" nodeTypeAlias="BlogPost">
        <bodyText><![CDATA[Some code is very repetitive. Extremely repetitive. Like writing properties for a class, printing to the debug output or adding a call to the logger.

This is boring stuff. The same code over and over again. Wouldn't it be nice if there was an easier way to write this code? Make the machine do the boring work? That's what they're for, right?

## Enter snippets
Snippets are a way to create short character sequences that Visual Studio will replace with code. You can also set parts of the code to be edited when being inserted. Visual Studio comes with some built in snippets that you can try out right away.

Typing `prop` and double tapping *Tab* will insert a standard public property. You will be asked to set the type and name of the property by hitting *Tab* to cycle through each part to be edited. When you're finished, hit *Enter* to confirm. 

![prop snippet][1]

## Adding your own
While Visual Studio has the basics built in, you'll want to make your own soon after starting to use snippets. You'll quickly find code that you type often and want to make into a snippet.

Snippets are defined in XML documents and you tell Visual Studio where to find them. The following code...

    	private string myString;
	public string MyString
	{
		get { return myString; }

		set
		{
			if (value != myString)
			{
				myString = value;
				PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(MyString)));
			}
		}
	}

... will be inserted by the following XML:

<script src="https://gist.github.com/jonstodle/e1d77c59c83e06062d124b9383f557c2.js"></script>

The top of the document has the author and a description of the snippet, but here are the more important of the tags:

- **SnippetType** this explains the type of snippet to Visual Studio. *Expansion* means it'll "expand" to more code
- **Shortcut** this is the sequence of characters to be entered to execute the snippet
- **Declarations** contains a list of the parts of the snippet that can be edited.
- **Literal** describes a part of the code that can be edited. The **ID** is the name of the part (has to be unique). The **Tooltip** will be shown when snippet is highlighted and should contain a short description. **Default** is the default value before editing.
- **Code** this contains the code to be inserted. The keywords from the previous list is placed where the editable parts are. The keywords are surrounded by dollar signs. The **$end$** keyword signifies the end of the code to be inserted. This is necessary to prevent Visual Studio from inserting an extra newline at the end.

It'll end up working like this:

![propc snippet][2]

## Adding them to Visual Studio
To easily sync the snippets across your development machines you can use something like OneDrive or Dropbox. I've made a git repo that I clone onto the machines I develop on.

To make the snippets available in Visual Studio you'll have to tell it where to find them:

1. Open Visual Studio
2. Go to Tools > Snippets manager
3. Select CSharp from the list of languages
4. You've got two choices here:
	- **Import**: you'll select snippet files and Visual Studio imports/copies them into it's store of snippets
	- **Add**: you'll select a folder and Visual Studio will add that folder to the folders it checks when looking for snippets (Visual Studio does not copy the files)
5. Snippets are now ready for use

My preferred method is to add the folder where I store my snippets. It's easier to keep them synced, and I can edit the snippets and have the changes instantly available in Visual Studio.

## Wrapping up
After I first discovered snippets, and especially when I learned how to make my own, I've been loving them. I believe it's one of the neatest features in Visual Studio, and I don't think it's very known or very appreciated. I hope I've convinced you to start using snippets. Even if you don't make your own, the default ones are a lot of help too.

Happy snippeting :P


  [1]: /media/1123/prop-snippet.gif
  [2]: /media/1124/propc-snippet.gif]]></bodyText>
        <title><![CDATA[Visual Studio Snippets: the shortcut to repetitive code]]></title>
      </BlogPost>
    </BlogPage>
    <ProjectsPage id="1061" key="c26d651f-b3e5-4b9c-be09-bcc0e26d61eb" parentID="1059" level="2" creatorID="0" sortOrder="1" createDate="2016-02-03T00:39:26" updateDate="2016-02-03T00:39:26" nodeName="Projects" urlName="projects" path="-1,1059,1061" isDoc="" nodeType="1047" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1057" nodeTypeAlias="ProjectsPage">
      <text><![CDATA[These are my projects of past and present]]></text>
      <title><![CDATA[Projects]]></title>
      <Project id="1161" key="e9eb81bd-7bf7-4228-849e-3a96d7844903" parentID="1061" level="3" creatorID="0" sortOrder="0" createDate="2016-06-13T15:46:35" updateDate="2016-06-13T16:28:04" nodeName="Debbie" urlName="debbie" path="-1,1059,1061,1161" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[Debbie]]></title>
        <images><![CDATA[1163,1164,1165]]></images>
        <description><![CDATA[<p><span>Debbie makes it easy to keep track of all the debts you have. No more paper notes or some virtual note on your phone or computer. This app makes it easy to add a person and all the related debts you have to that person. No more squabbling over who owes whom money and for what reason. </span></p>
<p><span>Debbie is easy to understand and even easier to use. Adding persons and the debts related to them is simple and quick. </span></p>
<p>The app keeps you debts stored in OneDrive and keeps it synced across your devices.</p>]]></description>
        <contactEmail><![CDATA[dev@jonstodle.com]]></contactEmail>
        <storeLink><![CDATA[https://www.microsoft.com/store/apps/9nblggh0f2lv]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1120/logo-contrast.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0,
        "x2": 1.1368683772161589E-15,
        "y2": 1.1368683772161589E-15
      }
    }
  ]
}]]></banner>
      </Project>
      <Project id="1062" key="6a058e46-4955-4e78-8f99-b0ba94ba9a32" parentID="1061" level="3" creatorID="0" sortOrder="1" createDate="2016-02-03T00:39:59" updateDate="2016-06-13T16:30:07" nodeName="Debt Tracker" urlName="debt-tracker" path="-1,1059,1061,1062" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[Debt Tracker]]></title>
        <images><![CDATA[1111,1112,1113,1114,1115]]></images>
        <description><![CDATA[<p><a data-id="1161" href="/{localLink:1161}" title="Debbie"><strong>This app has been discontinued in favor of Debbie</strong></a></p>
<p>Debt Tracker makes it easy to keep track of all the debts you have. No more paper notes or some virtual note on your phone or computer. This app makes it easy to add a person and all the related debts you have to that person. No more squabbling over who owes whom money and for what reason.</p>
<p>Debt Tracker is easy to understand and even easier to use. Adding persons and the debts related to them is simple and quick. And if the person should forget to pay you back, you can send a text message to remind you friend that he or she owes you money.</p>
<p>The easy integration with SkyDrive makes it possible to back up your data for safe keeping.</p>
<p>The ad banner is removable via in app purchase.</p>]]></description>
        <storeLink><![CDATA[http://www.windowsphone.com/s?appid=97e1ae60-49af-44b9-93f5-e88fd09e44ff]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1001/debttracker.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.24444444444444444,
        "x2": 0,
        "y2": 0.50555555555555554
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200
    }
  ]
}]]></banner>
      </Project>
      <Project id="1063" key="899476db-7f30-4db4-b321-6f401459dd5a" parentID="1061" level="3" creatorID="0" sortOrder="2" createDate="2016-02-03T00:41:55" updateDate="2016-06-13T16:28:05" nodeName="Fuel Consumption" urlName="fuel-consumption" path="-1,1059,1061,1063" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[Fuel Consumption]]></title>
        <images><![CDATA[1116,1117,1118,1119]]></images>
        <description><![CDATA[<p>This little handy app makes it easy for you keep track of your car's fuel consumption. A lot of older cars don't show you the amount of fuel the car uses, which is something that is nice to keep track of.</p>
<p>This simple app let's you enter the amount of fuel you filled and how far you've driven since last filling and it shows you the average consumption. It supports both understandable metric and confusing imperial units.</p>]]></description>
        <storeLink><![CDATA[http://windowsphone.com/s?appid=8befcec2-8734-446f-80da-134c1724d50e]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1002/fuel-consumption.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.22,
        "x2": 0,
        "y2": 0.53
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200
    }
  ]
}]]></banner>
      </Project>
      <Project id="1064" key="8ab21e39-04ec-4367-a6ce-e7eebc1dd0a7" parentID="1061" level="3" creatorID="0" sortOrder="3" createDate="2016-02-03T00:42:24" updateDate="2016-06-13T16:28:05" nodeName="GOT Board Game Tracker" urlName="got-board-game-tracker" path="-1,1059,1061,1064" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[GOT Board Game Tracker]]></title>
        <images><![CDATA[1120,1121,1122]]></images>
        <description><![CDATA[<p>Game of Thrones Board Game Tracker is a small and simple app that helps you keep track of the combat strength of two sides in a combat.</p>
<p>When playing the board game, it can sometimes become quite confusing how much combat strength is on either side. Instead of trying to keep track of all this in your heads, you can use this app to simplify the process of deciding who's winning the battle.</p>]]></description>
        <storeLink><![CDATA[http://windowsphone.com/s?appid=3dc2f42f-8e03-42e4-a692-2dabb33f73cb]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1003/got-board-game-tracker.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.3,
        "x2": 0,
        "y2": 0.45
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200
    }
  ]
}]]></banner>
      </Project>
      <Project id="1065" key="04db4c1e-6fea-4edc-a8df-1a3f039db6bc" parentID="1061" level="3" creatorID="0" sortOrder="4" createDate="2016-02-03T00:42:58" updateDate="2016-06-13T16:28:05" nodeName="Money Lender" urlName="money-lender" path="-1,1059,1061,1065" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[Money Lender]]></title>
        <images><![CDATA[1123,1124,1125,1126,1127]]></images>
        <description><![CDATA[<p><strong><a href="/{localLink:1083}" title="Debt Tracker">This app has been discontinued in favor of Debt Tracker</a></strong></p>
<p>Money Lender makes it easy to keep track of the debts you owe others and the debts others owe you. No more paper notes or some virtual note kept on your phone. The app makes it easy to keep track of where your money has gone or where they're coming from.</p>
<p>With the easy to use and easy to understand interface of Money Lender you'll easily see who you owe debts and who owe you debts. Money Lender shows you the persons who owes you or you owe debts and let's you add individual debts to each person.</p>
<p>In the person list, a summary of all the debts related to that person is shown. When adding debts, you'll enter why the money was lent. Making you able to remember why the money changed hands in the first place.</p>
<p>The summary page show the total amount of debts that you owe and other owe to you. This let's you see if your lending is out of balance.</p>
<p>The trail of Money Lender is fully functional, by buying the application you'll support the further development of the app and remove the ads.</p>]]></description>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1004/sq200.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.24888888888888888,
        "x2": 0,
        "y2": 0.50111111111111106
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200
    }
  ]
}]]></banner>
      </Project>
      <Project id="1066" key="61eebd7c-af59-4ed3-9913-4b82757402f0" parentID="1061" level="3" creatorID="0" sortOrder="5" createDate="2016-02-03T00:43:31" updateDate="2016-06-13T16:28:05" nodeName="Movie Watchlist" urlName="movie-watchlist" path="-1,1059,1061,1066" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[Movie Watchlist]]></title>
        <images><![CDATA[1128,1129,1130,1131,1132]]></images>
        <description><![CDATA[<p>Movie Watchlist lets you keep track of the movies you want to watch. Now it's easy to keep track of the backlog of movies. The app keeps a simple list of the movies you want to watch.</p>
<p>When adding a movie you have the choise of doing a web search for the movie; doing this executes a search on IMDb and returns genuine results from the largest and most extensive movie and tv database on the web.</p>
<p>You can get more information about the movie by opening a specific info page about each movie. All the info on this page is fetched directly from IMDb.</p>
<p>Movie Watchlist also has you covered if you are changing phones or has any reason to fear that your entire collection should disappear. Easy integration with SkyDrive let's you back up your lists to the web.</p>
<p>Should you be in the generous corner you can remove the ad banner via in app purchase.</p>]]></description>
        <storeLink><![CDATA[http://windowsphone.com/s?appid=c45d4a54-9e75-4c06-aa08-5296779ebc26]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1005/appicon.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.33555555555555555,
        "x2": 0,
        "y2": 0.41444444444444445
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200
    }
  ]
}]]></banner>
      </Project>
      <Project id="1067" key="cead8067-cdcf-4fc0-aa36-784edc6cda1a" parentID="1061" level="3" creatorID="0" sortOrder="6" createDate="2016-02-03T00:44:05" updateDate="2016-06-13T16:28:05" nodeName="Quote List" urlName="quote-list" path="-1,1059,1061,1067" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[Quote List]]></title>
        <images><![CDATA[1133,1134,1135,1136]]></images>
        <description><![CDATA[<p>Quote List let's you note down you favorite quotes, or just quotes you want to have handy in case you want to impress someone.</p>
<p>Quote List is designed to be fast and effective. The simple and fast interface of the app makes it easy to add and browse your saved quotes; no hassle, just ease of use.</p>
<p>The trial version of Quote List let's you use the application with all it's features. By buying the app the ads that support the further development of the app will disappear.</p>]]></description>
        <storeLink><![CDATA[http://windowsphone.com/s?appid=3d708a0e-296f-4e33-80fe-1bae24cbffbb]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1006/quote-list.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.35333333333333333,
        "x2": 0,
        "y2": 0.39666666666666667
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200
    }
  ]
}]]></banner>
      </Project>
      <Project id="1068" key="e47d6891-2440-43ff-826e-8ce12085e521" parentID="1061" level="3" creatorID="0" sortOrder="7" createDate="2016-02-03T00:44:38" updateDate="2016-06-13T16:28:05" nodeName="SkiltSøk" urlName="skiltsoek" path="-1,1059,1061,1068" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[SkiltSøk]]></title>
        <images><![CDATA[1137,1138,1139,1140,1141]]></images>
        <description><![CDATA[<p><strong>This application is only available in Norwegian</strong></p>
<p>SkiltSøk er en applikasjon som lar deg slå opp informasjon om kjøretøy ved å skrive inn registreringsnummeret til kjøretøyet. Det er også mulig å se om kjøretøyet har registrerte heftelser hos Brønnøysundregistrene. Applikasjonen krever en internettforbindelse for å kunne hente informasjonen.</p>
<p>Dine siste søk vil bli lagret slik at de kan enkelt hentes opp og du slipper å gjøre et ekstra søk. Du kan også merke søkene dine som favoritter slik at de alltid er tilgjengelige.</p>
<p>Det er også mulig å finne informasjon om bilens eier, dette er en tjeneste som kun er tilgjengelig via SMS og vil koste kr 3,- for hver bruk. Denne tjenesten leveres av Statens Vegvesen.</p>]]></description>
        <storeLink><![CDATA[http://windowsphone.com/s?appid=d72039a2-e353-46b6-ab14-019dd8094021]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1007/appicon.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.38,
        "x2": 0,
        "y2": 0.37
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200
    }
  ]
}]]></banner>
      </Project>
      <Project id="1070" key="b5eecbb5-a82f-4602-83d6-11c0e4a807b8" parentID="1061" level="3" creatorID="0" sortOrder="8" createDate="2016-02-03T00:45:41" updateDate="2016-06-13T15:53:59" nodeName="wkcd" urlName="wkcd" path="-1,1059,1061,1070" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[wkcd]]></title>
        <images><![CDATA[1145,1146,1147]]></images>
        <description><![CDATA[<p>Enjoy xkcd on your Windows device.</p>
<p>wkcd let's you browse the infamous xkcd comic by Randall Munroe. xkcd is "A webcomic of romance, sarcasm, math, and language." It covers everything between the mundane to the infinetely complex.</p>
<p>wkcd's tile shows the most current comic and you can also receive a silent notification when there's a new comic strip published.</p>
<p>Enjoy.</p>]]></description>
        <storeLink><![CDATA[https://www.microsoft.com/store/apps/9nblgggzjt9k]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.48833333333333334,
    "top": 0.485
  },
  "src": "/media/1009/logo-dark.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.25718518518518518,
        "x2": 0,
        "y2": 0.22614814814814818
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200,
      "coordinates": {
        "x1": 9.9475983006414134E-16,
        "y1": 9.9475983006414134E-16,
        "x2": 0,
        "y2": 0
      }
    }
  ]
}]]></banner>
      </Project>
      <Project id="1069" key="6320bf3c-3de1-46b6-ba39-99d7d68f9414" parentID="1061" level="3" creatorID="0" sortOrder="9" createDate="2016-02-03T00:45:09" updateDate="2016-06-13T16:28:06" nodeName="wpcd" urlName="wpcd" path="-1,1059,1061,1069" isDoc="" nodeType="1049" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="1056" nodeTypeAlias="Project">
        <title><![CDATA[wpcd]]></title>
        <images><![CDATA[1142,1143,1144]]></images>
        <description><![CDATA[<p><a href="/{localLink:3077}" title="wkcd"><strong>This app has been discontinued in favor of wkcd</strong></a></p>
<p>The most beautiful app for reading xkcd on Windows Phone. wpcd is a fast and simple app that makes easy to enjoy your favorite geeky web comic. The app keeps you up to date by showing the most recent comic on the live tile.</p>]]></description>
        <storeLink><![CDATA[http://windowsphone.com/s?appid=dd5b1fb1-22e6-4d5c-a2c0-e54b23f8bf3f]]></storeLink>
        <banner><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1008/wpcd.png",
  "crops": [
    {
      "alias": "Bio image",
      "width": 400,
      "height": 600
    },
    {
      "alias": "Project banner",
      "width": 800,
      "height": 200,
      "coordinates": {
        "x1": 0,
        "y1": 0.21333333333333335,
        "x2": 0,
        "y2": 0.53666666666666663
      }
    },
    {
      "alias": "App badge",
      "width": 200,
      "height": 200
    }
  ]
}]]></banner>
      </Project>
    </ProjectsPage>
    <UnlistedPages id="1159" key="54f66eaf-dae7-4916-88e6-4e76faed3910" parentID="1059" level="2" creatorID="0" sortOrder="2" createDate="2016-06-06T11:00:01" updateDate="2016-06-06T11:00:01" nodeName="Unlisted Pages" urlName="unlisted-pages" path="-1,1059,1159" isDoc="" nodeType="1150" creatorName="Jon Stødle" writerName="Jon Stødle" writerID="0" template="0" nodeTypeAlias="UnlistedPages" />
  </Home>
</root>